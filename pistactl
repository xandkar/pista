#! /bin/bash

set -e

DEFAULT_SLOT_TTL=5

PROGRAM="$0"

counter_next() {
    local -r file="$_counter_file"

    awk '{n = $1} END {print n + 1}' "$file" | sponge "$file"
    cat "$file"
}

tmux_new_win() {
    local -r cmd="$1"

    local -r window=$(counter_next "$_counter_file")
    local -r pane=0

    echo "[debug] window:\"$window\" cmd:\"$cmd\"" >&2
    $_tmux new-window -t "$_session"
    $_tmux send-keys  -t "$_session":"$window"."$pane" "$cmd" ENTER
}

start_slot() {
    local -r dir_slot="$1"

    local -r name=$(basename "$dir_slot")
    local -r out="$dir_slot"/out
    local -r run="$dir_slot"/run
    local -r len=$(< "$dir_slot"/len)
    local -r ttl=$(< "$dir_slot"/ttl) || "$DEFAULT_SLOT_TTL"

    rm -f "$out"
    mkfifo "$out"
    tmux_new_win "cd $dir_slot && $run > $out; notify-send -u critical 'pista slot exited!' \"$name\n\$?\""
    printf '%s %d %d\n' "$out" "$len" "$ttl"
}

start_slots() {
    local dir_slot

    list_slots \
    | while read -r dir_slot; do
        start_slot "$dir_slot"
    done \
    | xargs
}

list_slots() {
    find "$_dir_slots" -mindepth 1 -maxdepth 1 -type d | sort
}

remove_slot_pipes() {
    find "$_dir_slots" -type p -delete
}

_start() {
    local -r opts_default="-l 3 -i 0 -f ' (' -s ')    (' -r ') ' -x"
    local -r opts=$(< "$_dir"/options) || "$opts_default"

    mkdir -p "$_dir_slots"

    $_tmux new-session -d -s "$_session"

    # Have to increment window ids in a file, because an increment operation
    # would be executed local to each subprocess if we did something like:
    #     $(start_slot $((win++)) foo)
    _counter_file=$(mktemp)
    tmux_new_win \
        "pista $opts $(start_slots); notify-send -u critical 'pista exited!' \"\$?\""
    rm "$_counter_file"
}

_stop() {
    $_tmux kill-session -t "$_session"
    remove_slot_pipes
    rm -f "$_file_sock"
}

_restart() {
    _stop || true
    _start
}

_attach() {
    $_tmux attach -t "$_session"
}

main() {
    local -r arg_cmd="$1"
    local -r arg_dir="$2"

    local cmd

    case "$arg_cmd" in
        'start'   ) cmd=_start;;
        'stop'    ) cmd=_stop;;
        'restart' ) cmd=_restart;;
        'attach'  ) cmd=_attach;;
        'help')
            echo "$PROGRAM (start|stop|restart|attach|help) [DIRECTORY]" >&2
            exit 1;;
        '')
            echo "[error] No command given." >&2
            exit 1;;
        *)
            echo "[error] Unknown command: \"$arg_cmd\". Known: start|stop|restart|attach" >&2
            exit 1;;
    esac
    case "$arg_dir" in
        '')
            _dir=~/.pistactl."$(hostname)";;
        *)
            _dir="$arg_dir";;
    esac

    _dir_slots="$_dir"/slots
    _file_sock="$_dir"/sock
    _tmux="tmux -S $_file_sock"

    local -r session_name_file="$_dir"/session
    if [ -s "$session_name_file" ]
    then
        _session=$(< "$session_name_file")
    else
        _session=$(echo "$_dir" | sha256sum | awk '{print $1}')
    fi

    mkdir -p "$_dir"
    cd "$_dir"
    $cmd
}

main "$@"
